// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from packets.djinni

#pragma once

#include <functional>

namespace interaxon { namespace bridge {

/**
 * \if IOS_ONLY
 * \file
 * \endif
 * This Enum represents all possible packet types.
 * The type of the packet tells you information about what data it contains.
 * When you know the packet type, look at the corresponding enum for information
 * about data mapping (e.g.: Accelerometer enum, EEG enum, etc).
 */
enum class MuseDataPacketType : int {
    /**
     * 3-axis accelerometer data packet
     * An Accelerometer packet provides 3 pieces of data.
     * \sa
     * \li \classlink{Accelerometer} for mapping details.
     */
    ACCELEROMETER,
    /**
     * 3-axis gyro data packet
     * A Gyro packet provides 3 pieces of data.
     * \sa
     * \li \classlink{Gyro} for mapping details.
     */
    GYRO,
    /**
     * Specifies raw EEG samples.
     *
     * Values in this packet correspond to EEG data read from the different
     * sensor locations on the headband. The accessors in the Eeg enum define
     * the mapping from packet values to sensor locations.
     *
     * The size of the data is unspecified, but it is large enough to hold all
     * the EEG channels emitted by the current preset. In the current version of
     * the library, it is never more than 6 elements long, i.e. it always fits
     * into a 6-element array.
     *
     * In the future new %Muse Presets may be added, which will have extra
     * values.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     */
    EEG,
    /**
     * Packet stands in for n dropped samples of the accelerometer type.
     * Size of the values array for this packet is always 1.
     *
     * \deprecated This is never emitted in an actual Muse session; instead,
     * NaN-filled packets of the basic type (EEG or ACCELEROMETER) are emitted
     * to stand in for dropped packets. This can only appear when reading
     * Muse files written with older versions of the library.
     */
    DROPPED_ACCELEROMETER,
    /**
     * Packet stands in for n dropped samples of the eeg type.
     * Size of the values array for this packet is always 1.
     *
     * \deprecated This is never emitted in an actual Muse session; instead,
     * NaN-filled packets of the basic type (EEG or ACCELEROMETER) are emitted
     * to stand in for dropped packets. This can only appear when reading
     * Muse files written with older versions of the library.
     */
    DROPPED_EEG,
    /**
     * Packet contains information about signal quantization.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     *
     * Each index in this packet corresponds to the same index in an EEG packet.
     * Quantization occurs when there is a particularly noisy signal, which
     * generally happens when there is not a good contact between the headband
     * and the skin.
     *
     * Higher numbers are worse; 1 is no quantization, and 16 is maximum
     * quantization.
     *
     * These values are used under the hood by the library and by %Muse Elements
     * in reconstructing the EEG signal and contributing to an overall measure
     * of noise; it is extremely unlikely that you will be interested in them.
     * For measuring noise, it is recommended to instead use the more useful
     * computed values like 'headband_on' or 'hsi'.
     *
     * Each quantization packet applies to the next 16 EEG packets.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     */
    QUANTIZATION,
    /**
     * %Muse headband battery data packet.
     * This packet provides 3 pieces of data.
     * \sa
     * \li \classlink{Battery} for mapping details.
     */
    BATTERY,
    /**
     * Packet contains raw data from %Muse DRL and REF sensors.
     * This packet provides 2 pieces of data.
     * \sa
     * \li \classlink{DrlRef} for mapping details.
     */
    DRL_REF,
    /**
     * EEG derived value.
     * Absolute alpha band powers for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Absolute_Band_Powers
     */
    ALPHA_ABSOLUTE,
    /**
     * EEG derived value.
     * Absolute beta band powers for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Absolute_Band_Powers
     */
    BETA_ABSOLUTE,
    /**
     * EEG derived value.
     * Absolute delta band powers for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Absolute_Band_Powers
     */
    DELTA_ABSOLUTE,
    /**
     * EEG derived value.
     * Absolute theta band powers for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Absolute_Band_Powers
     */
    THETA_ABSOLUTE,
    /**
     * EEG derived value.
     * Absolute gamma band powers for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Absolute_Band_Powers
     */
    GAMMA_ABSOLUTE,
    /**
     * EEG derived value.
     * Relative alpha band powers for each channel.
     * Values in this packet are in range [0; 1].
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Relative_Band_Powers
     */
    ALPHA_RELATIVE,
    /**
     * EEG derived value.
     * Relative beta band powers for each channel.
     * Values in this packet are in range [0; 1].
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Relative_Band_Powers
     */
    BETA_RELATIVE,
    /**
     * EEG derived value.
     * Relative delta band powers for each channel.
     * Values in this packet are in range [0; 1].
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Relative_Band_Powers
     */
    DELTA_RELATIVE,
    /**
     * EEG derived value.
     * Relative band powers for each channel.
     * Values in this packet are in range [0; 1].
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Relative_Band_Powers
     */
    THETA_RELATIVE,
    /**
     * EEG derived value.
     * Relative band powers for each channel.
     * Values in this packet are in range [0; 1].
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Relative_Band_Powers
     */
    GAMMA_RELATIVE,
    /**
     * EEG derived value.
     * Alpha band power scores for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Band_Power_Session_Scores
     */
    ALPHA_SCORE,
    /**
     * EEG derived value.
     * Beta band power scores for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Band_Power_Session_Scores
     */
    BETA_SCORE,
    /**
     * EEG derived value.
     * Delta band power scores for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Band_Power_Session_Scores
     */
    DELTA_SCORE,
    /**
     * EEG derived value.
     * Theta band power scores for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Band_Power_Session_Scores
     */
    THETA_SCORE,
    /**
     * EEG derived value.
     * Gamma band power scores for each channel.
     * This packet contains the same amount of data as an
     * EEG packet and has the same channel mapping.
     * \sa
     * \li \classlink{Eeg} for mapping details.
     * \li http://developer.choosemuse.com/research-tools/available-data#Band_Power_Session_Scores
     */
    GAMMA_SCORE,
    /**
     * EEG derived value.
     * Is Good indicates whether or not the last 1 second of raw EEG data on each
     * channel was good or not. Eye blinks or muscle movement can interfere
     * with EEG data and cause Is Good to report that the data is not good.
     * This is emitted every 1/10 of a second to represent the rolling window of the
     * last second of EEG data. This is only useful for real time EEG analysis.
     * This packet only contains 4 values for the 4 sensors on the headband,
     * there is no support for the auxillary channels.
     *
     * \sa
     * \li \classlink{Eeg} for mapping details.
     */
    IS_GOOD,
    /**
     * EEG derived value.
     * HSI values represent the fit of the headband. (known as headband status indicator).
     * This value is not emitted by the LibMuse SDK.
     */
    HSI,
    /**
     * EEG derived value.
     * HSI precision values represent the fit of the headband.
     * This packet contains 4 values corresponding to
     * \enumlink{Eeg,EEG1,IXNEegEEG1},
     * \enumlink{Eeg,EEG2,IXNEegEEG2},
     * \enumlink{Eeg,EEG3,IXNEegEEG3} and
     * \enumlink{Eeg,EEG4,IXNEegEEG4}.
     * There are no
     * \enumlink{MuseDataPacketType,HSI_PRECISION,IXNMuseDataPacketTypeHsiPrecision}
     * values for the auxillary channels.<br>
     *
     * Each channel represents the fit at that location.
     * A value of \c 1 represents a good fit, \c 2 represents a mediocre fit,
     * and a value or \c 4 represents a poor fit.
     *
     * \sa
     * \li \classlink{Eeg} for mapping details.
     */
    HSI_PRECISION,
    /**
     * Artifacts packet type will be sent.
     *
     * Note that this will result in your listener receiving
     * \classlink{MuseArtifactPacket}.
     * We never emit a \classlink{MuseDataPacket} with
     * \enumlink{MuseDataPacketType,ARTIFACTS,IXNMuseDataPacketTypeArtifacts};
     * this is only here for use in register / unregister methods.
     */
    ARTIFACTS,
    /** The total number of possible data packet types */
    TOTAL,
};

} }  // namespace interaxon::bridge

namespace std {

template <>
struct hash<::interaxon::bridge::MuseDataPacketType> {
    size_t operator()(::interaxon::bridge::MuseDataPacketType type) const {
        return std::hash<int>()(static_cast<int>(type));
    }
};

}  // namespace std
